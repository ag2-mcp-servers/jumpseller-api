# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:06:11+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Query
from pydantic import conint

from models import (
    AddProductCustomField,
    App,
    Attachment,
    AttachmentEdit,
    BadParams,
    Category,
    CategoryEdit,
    CheckoutCustomField,
    CheckoutCustomFieldEdit,
    Count,
    Country,
    Customer,
    CustomerAdditionalField,
    CustomerAdditionalFieldEdit,
    CustomerCategory,
    CustomerCategoryEdit,
    CustomersIdFieldsGetResponse,
    CustomersToCustomerCategory,
    CustomerWithPasswordNoID,
    CustomField,
    CustomFieldEdit,
    CustomFieldSelectOption,
    CustomFieldSelectOptionEdit,
    DigitalProduct,
    DigitalProductEdit,
    Fields,
    Fulfillment,
    Hook,
    HookEdit,
    Image,
    ImageEdit,
    JSApp,
    JSAppEdit,
    MessageObject,
    NotFound,
    Order,
    OrderCreate,
    OrderEdit,
    OrderHistory,
    OrderHistoryEdit,
    Page,
    PageModify,
    PartnerError,
    PartnerStoreCode,
    PartnerStoreCreate,
    PaymentMethod,
    Product,
    ProductCustomField,
    ProductEdit,
    ProductOption,
    ProductOptionEdit,
    ProductOptionValue,
    ProductOptionValueEdit,
    Promotion,
    PromotionEdit,
    Region,
    ShippingMethod,
    ShippingMethodEdit,
    Status11,
    Status12,
    StatusInvalid,
    Store2,
    Tax,
    TaxEdit,
    Variant,
    VariantEdit,
)
from models.CheckoutCustomFields import JsonGetResponse
from models.Countries import JsonGetResponse
from models.Countries_countryCode_Regions import JsonGetResponse
from models.CustomerCategories import JsonGetResponse
from models.CustomerCategories_id_Customers import JsonGetResponse, JsonPostResponse
from models.Customers import JsonGetResponse
from models.CustomFields import JsonGetResponse
from models.CustomFields_id_SelectOptions import JsonGetResponse
from models.Fulfillments import JsonGetResponse
from models.Hooks import JsonGetResponse
from models.Order_id_Fulfillments import JsonGetResponse
from models.Orders import JsonGetResponse
from models.Orders_id_History import JsonGetResponse
from models.OrdersStatus_status_ import JsonGetResponse
from models.Pages import JsonGetResponse
from models.PartnersStores import JsonGetResponse
from models.PaymentMethods import JsonGetResponse
from models.Products import JsonGetResponse
from models.Products_id_Attachments import JsonGetResponse
from models.Products_id_DigitalProducts import JsonGetResponse
from models.Products_id_Fields import JsonGetResponse
from models.Products_id_Images import JsonGetResponse
from models.Products_id_Options import JsonGetResponse
from models.Products_id_Options_optionId_Values import JsonGetResponse
from models.Products_id_Variants import JsonGetResponse
from models.ProductsAfter_id_ import JsonGetResponse
from models.ProductsCategory_categoryId_ import JsonGetResponse
from models.ProductsSearch import JsonGetResponse
from models.ProductsStatus_status_ import JsonGetResponse
from models.Promotions import JsonGetResponse
from models.ShippingMethods import JsonGetResponse
from models.StoreCheckStatus import JsonGetResponse
from models.StoreLanguages import JsonGetResponse
from models.Taxes import JsonGetResponse

app = MCPProxy(
    contact={'x-twitter': 'jumpseller'},
    description='# Endpoint Structure\n\nAll URLs are in the format: \n\n```text\nhttps://api.jumpseller.com/v1/path.json?login=XXXXXX&authtoken=storetoken  \n```\n\nThe path is prefixed by the API version and the URL takes as parameters the login (your store specific API login) and your authentication token.\n<br/><br/>\n***\n\n# Version\n\nThe current version of the API is **v1**.  \nIf we change the API in backward-incompatible ways, we\'ll increase the version number and maintain stable support for the old urls.\n<br/><br/>\n***\n\n# Authentication\n\nThe API uses a token-based authentication with a combination of a login key and an auth token. **Both parameters can be found on the left sidebar of the Account section, accessed from the main menu of your Admin Panel**. The auth token of the user can be reset on the same page.\n\n![Store Login](/images/support/api/apilogin.png)\n\nThe auth token is a **32 characters** string.\n\nIf you are developing a Jumpseller App, the authentication should be done using [OAuth-2](/support/oauth-2). Please read the article [Build an App](/support/apps) for more information.\n<br/><br/>\n***\n\n# Curl Examples\n\nTo request all the products at your store, you would append the products index path to the base url to create an URL with the format:  \n\n```text\nhttps://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX\n```\n\nIn curl, you can invoque that URL with:  \n\n```text\ncurl -X GET "https://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX"\n```\n\nTo create a product, you will include the JSON data and specify the MIME Type:  \n\n```text\ncurl -X POST -d \'{ "product" : {"name": "My new Product!", "price": 100} }\' "https://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX" -H "Content-Type:application/json"\n```\n\nand to update the product identified with 123:  \n\n```text\ncurl -X PUT -d \'{ "product" : {"name": "My updated Product!", "price": 99} }\' "https://api.jumpseller.com/v1/products/123.json?login=XXXXXX&authtoken=XXXXX" -H "Content-Type:application/json"\n```\n\nor delete it:  \n\n```text\ncurl -X DELETE "https://api.jumpseller.com/v1/products/123.json?login=XXXXXX&authtoken=XXXXX" -H "Content-Type:application/json"\n```\n<br/><br/>\n***\n\n# PHP Examples\n\nCreate a new Product (POST method)\n\n```php\n$url = \'https://api.jumpseller.com/v1/products.json?login=XXXXX&authtoken=XXXXX;\n$ch = curl_init($url);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array(\'Content-Type: application/json\'));\n\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST"); //post method\ncurl_setopt($ch, CURLOPT_POSTFIELDS, \'{ "product" : {"name": "My updated Product!", "price": 99} }\');\n\n$result = curl_exec($ch);\nprint_r($result);\ncurl_close($ch);\n```\n<br/><br/>\n***\n\n# Plain JSON only. No XML.\n\n* We only support JSON for data serialization.\n* Our node format has no root element.  \n* We use snake_case to describe attribute keys (like "created_at").  \n* All empty value are replaced with **null** strings.\n* All API URLs end in .json to indicate that they accept and return JSON.\n* POST and PUT methods require you to explicitly state the MIME type of your request\'s body content as **"application/json"**.\n<br/><br/>\n***\n\n# Rate Limit\nYou can perform a maximum of:\n\n+ 240 (two hundred forty) requests per minute and\n+ 8 (eight) requests per second \n\nIf you exceed this limit, you\'ll get a 403 Forbidden (Rate Limit Exceeded) response for subsequent requests.  \n\nThe rate limits apply by IP address and by store. This means that multiple requests on different stores are not counted towards the same rate limit.\n\nThis limits are necessary to ensure resources are correctly used. Your application should be aware of this limits and retry any unsuccessful request, check the following Ruby stub:\n\n```ruby\ntries = 0; max_tries = 3;\nbegin\n  HTTParty.send(method, uri) # perform an API call.\n  sleep 0.5\n  tries += 1\nrescue\n  unless tries >= max_tries\n    sleep 1.0 # wait the necessary time before retrying the call again.\n    retry\n  end\nend\n```\n\nFinally, you can review the Response Headers of each request:\n\n```text\nJumpseller-PerMinuteRateLimit-Limit: 60  \nJumpseller-PerMinuteRateLimit-Remaining: 59 # requests available on the per-second interval  \nJumpseller-PerSecondRateLimit-Limit: 2  \nJumpseller-PerSecondRateLimit-Remaining: 1 # requests available on the per-second interval\n``` \n\nto better model your application requests intervals.\n\nIn the event of getting your IP banned, the Response Header `Jumpseller-BannedByRateLimit-Reset` informs you the time when will your ban be reseted.\n<br/><br/>\n***\n\n# Pagination\n\nBy default we will return 50 objects (products, orders, etc) per page. There is a maximum of 100, using a query string `&limit=100`.\nIf the result set gets paginated it is your responsibility to check the next page for more objects -- you do this by using query strings `&page=2`, `&page=3` and so on.\n\n```text\nhttps://api.jumpseller.com/v1/products.json?login=XXXXXX&authtoken=XXXXX&page=3&limit=100\n```\n<br/><br/>\n***\n\n# More\n* [Jumpseller API wrapper](https://gitlab.com/jumpseller-api/ruby) provides a public Ruby abstraction over our API;\n* [Apps Page](/apps) showcases external integrations with Jumpseller done by technical experts;\n* [Imgbb API](https://api.imgbb.com/) provides an easy way to upload and temporaly host for images and files.\n<br/><br/>\n***\n<br/><br/>\n',
    title='Jumpseller API',
    version='1.0.0',
    servers=[{'url': 'https://api.jumpseller.com/v1'}],
)


@app.get('/categories.json', tags=['category_management'])
def get_categories_json(login: str, authtoken: str = ...):
    """
    Retrieve all Categories.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/categories.json',
    description=""" Category's permalink is automatically generated from the given category's name. """,
    tags=['category_management'],
)
def post_categories_json(login: str, authtoken: str = ..., body: CategoryEdit = ...):
    """
    Create a new Category.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/categories/count.json', tags=['category_management'])
def get_categories_count_json(login: str, authtoken: str = ...):
    """
    Count all Categories.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/categories/{id}.json', tags=['category_management'])
def delete_categories__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Delete an existing Category.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/categories/{id}.json', tags=['category_management'])
def get_categories__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve a single Category.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/categories/{id}.json', tags=['category_management'])
def put_categories__id_json(
    login: str, authtoken: str = ..., id: int = ..., body: CategoryEdit = ...
):
    """
    Modify an existing Category.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/checkout_custom_fields.json',
    tags=['checkout_custom_field_management', 'custom_field_management'],
)
def get_checkout_custom_fields_json(
    login: str,
    authtoken: str = ...,
    limit: Optional[conint(le=200)] = 50,
    page: Optional[int] = 1,
):
    """
    Retrieve all Checkout Custom Fields.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/checkout_custom_fields.json',
    description=""" Type values can be: input, selection, checkbox, date or text. Area values can be: contact, billing_shipping or other. """,
    tags=['checkout_custom_field_management', 'custom_field_management'],
)
def post_checkout_custom_fields_json(
    login: str, authtoken: str = ..., body: CheckoutCustomFieldEdit = ...
):
    """
    Create a new CheckoutCustomField.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/checkout_custom_fields/{id}.json',
    tags=['checkout_custom_field_management', 'custom_field_management'],
)
def delete_checkout_custom_fields__id_json(
    login: str, authtoken: str = ..., id: int = ...
):
    """
    Delete an existing CheckoutCustomField.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/checkout_custom_fields/{id}.json',
    tags=['checkout_custom_field_management', 'custom_field_management'],
)
def get_checkout_custom_fields__id_json(
    login: str, authtoken: str = ..., id: int = ...
):
    """
    Retrieve a single CheckoutCustomField.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/checkout_custom_fields/{id}.json',
    tags=['checkout_custom_field_management', 'custom_field_management'],
)
def put_checkout_custom_fields__id_json(
    login: str, authtoken: str = ..., id: int = ..., body: CheckoutCustomFieldEdit = ...
):
    """
    Update a CheckoutCustomField.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/countries.json', tags=['country_management'])
def get_countries_json(login: str, authtoken: str = ...):
    """
    Retrieve all Countries.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/countries/{country_code}.json', tags=['country_management'])
def get_countries__country_code_json(
    login: str, authtoken: str = ..., country_code: str = ...
):
    """
    Retrieve a single Country information.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/countries/{country_code}/regions.json', tags=['country_management'])
def get_countries__country_code_regions_json(
    login: str, authtoken: str = ..., country_code: str = ...
):
    """
    Retrieve all Regions from a single Country.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/countries/{country_code}/regions/{region_code}.json', tags=['country_management']
)
def get_countries__country_code_regions__region_code_json(
    login: str, authtoken: str = ..., country_code: str = ..., region_code: str = ...
):
    """
    Retrieve a single Region information object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/custom_fields.json', tags=['custom_field_management', 'store_management'])
def get_custom_fields_json(login: str, authtoken: str = ...):
    """
    Retrieve all Store's Custom Fields.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/custom_fields.json',
    tags=[
        'custom_field_management',
        'checkout_custom_field_management',
        'product_custom_field_management',
    ],
)
def post_custom_fields_json(
    login: str, authtoken: str = ..., body: CustomFieldEdit = ...
):
    """
    Create a new Custom Field.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/custom_fields/{id}.json',
    tags=[
        'checkout_custom_field_management',
        'custom_field_management',
        'product_custom_field_management',
    ],
)
def delete_custom_fields__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Delete an existing CustomField.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/custom_fields/{id}.json',
    tags=['custom_field_management', 'checkout_custom_field_management'],
)
def get_custom_fields__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve a single CustomField.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/custom_fields/{id}.json',
    tags=[
        'custom_field_management',
        'checkout_custom_field_management',
        'product_custom_field_management',
    ],
)
def put_custom_fields__id_json(
    login: str, authtoken: str = ..., id: int = ..., body: CustomFieldEdit = ...
):
    """
    Update a CustomField.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/custom_fields/{id}/select_options.json', tags=['custom_field_management'])
def get_custom_fields__id_select_options_json(
    login: str, authtoken: str = ..., id: int = ...
):
    """
    Retrieve all Store's Custom Fields.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/custom_fields/{id}/select_options.json',
    tags=['custom_field_management', 'product_custom_field_management'],
)
def post_custom_fields__id_select_options_json(
    login: str,
    authtoken: str = ...,
    id: str = ...,
    body: CustomFieldSelectOptionEdit = ...,
):
    """
    Create a new Custom Field Select Option.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/custom_fields/{id}/select_options/{custom_field_select_option_id}.json',
    tags=[
        'custom_field_management',
        'checkout_custom_field_management',
        'product_custom_field_management',
    ],
)
def delete_custom_field_select_option(
    login: str,
    authtoken: str = ...,
    id: int = ...,
    custom_field_select_option_id: int = ...,
):
    """
    Delete an existing CustomFieldSelectOption.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/custom_fields/{id}/select_options/{custom_field_select_option_id}.json',
    tags=['custom_field_management', 'product_custom_field_management'],
)
def retrieve_select_option_from_custom_field(
    login: str,
    authtoken: str = ...,
    id: int = ...,
    custom_field_select_option_id: int = ...,
):
    """
    Retrieve a single SelectOption from a CustomField.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/custom_fields/{id}/select_options/{custom_field_select_option_id}.json',
    tags=['custom_field_management', 'product_custom_field_management'],
)
def update_custom_field_select_option(
    login: str,
    authtoken: str = ...,
    id: int = ...,
    custom_field_select_option_id: int = ...,
    body: CustomFieldSelectOptionEdit = ...,
):
    """
    Update a SelectOption from a CustomField.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/customer_categories.json', tags=['customer_category_management'])
def get_customer_categories_json(
    login: str,
    authtoken: str = ...,
    limit: Optional[conint(le=200)] = 50,
    page: Optional[int] = 1,
):
    """
    Retrieve all Customer Categories.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/customer_categories.json', tags=['customer_category_management'])
def post_customer_categories_json(
    login: str, authtoken: str = ..., body: CustomerCategoryEdit = ...
):
    """
    Create a new CustomerCategory.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/customer_categories/{id}.json',
    tags=['category_management', 'customer_category_management'],
)
def delete_customer_categories__id_json(
    login: str, authtoken: str = ..., id: int = ...
):
    """
    Delete an existing CustomerCategory.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customer_categories/{id}.json',
    tags=['customer_category_management', 'customer_management'],
)
def get_customer_categories__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve a single CustomerCategory.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/customer_categories/{id}.json',
    tags=['customer_category_management', 'customer_management'],
)
def put_customer_categories__id_json(
    login: str, authtoken: str = ..., id: int = ..., body: CustomerCategoryEdit = ...
):
    """
    Update a CustomerCategory.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/customer_categories/{id}/customers.json',
    tags=['customer_category_management', 'customer_management'],
)
def delete_customer_categories__id_customers_json(
    login: str,
    authtoken: str = ...,
    id: int = ...,
    body: CustomersToCustomerCategory = ...,
):
    """
    Delete Customers from an existing CustomerCategory.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customer_categories/{id}/customers.json',
    tags=['customer_category_management', 'customer_management'],
)
def get_customer_categories__id_customers_json(
    login: str, authtoken: str = ..., id: int = ...
):
    """
    Retrieves the customers in a CustomerCategory.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/customer_categories/{id}/customers.json',
    tags=['customer_category_management', 'customer_management'],
)
def post_customer_categories__id_customers_json(
    login: str,
    authtoken: str = ...,
    id: int = ...,
    body: CustomersToCustomerCategory = ...,
):
    """
    Adds Customers to a CustomerCategory.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/customers.json', tags=['customer_management'])
def get_customers_json(
    login: str,
    authtoken: str = ...,
    limit: Optional[conint(le=200)] = 50,
    page: Optional[int] = 1,
):
    """
    Retrieve all Customers.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/customers.json', tags=['customer_management'])
def post_customers_json(
    login: str, authtoken: str = ..., body: CustomerWithPasswordNoID = ...
):
    """
    Create a new Customer.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/customers/count.json', tags=['customer_management'])
def get_customers_count_json(login: str, authtoken: str = ...):
    """
    Count all Customers.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/customers/email/{email}.json', tags=['customer_management'])
def get_customers_email__email_json(login: str, authtoken: str = ..., email: str = ...):
    """
    Retrieve a single Customer by email.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/customers/{id}.json', tags=['customer_management', 'customer_category_management']
)
def delete_customers__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Delete an existing Customer.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/customers/{id}.json', tags=['customer_management'])
def get_customers__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve a single Customer by id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/customers/{id}.json', tags=['customer_management'])
def put_customers__id_json(
    login: str,
    authtoken: str = ...,
    id: int = ...,
    body: CustomerWithPasswordNoID = ...,
):
    """
    Update a new Customer.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customers/{id}/fields', tags=['customer_management', 'custom_field_management']
)
def get_customers__id_fields(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieves the Customer Additional Field of a Customer.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/customers/{id}/fields', tags=['customer_management', 'custom_field_management']
)
def post_customers__id_fields(
    login: str,
    authtoken: str = ...,
    id: int = ...,
    body: CustomerAdditionalFieldEdit = ...,
):
    """
    Adds Customer Additional Fields to a Customer.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/customers/{id}/fields/{field_id}',
    tags=['custom_field_management', 'customer_management'],
)
def delete_customers__id_fields__field_id(
    login: str, authtoken: str = ..., id: int = ..., field_id: int = ...
):
    """
    Delete a Customer Additional Field.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/customers/{id}/fields/{field_id}',
    tags=['custom_field_management', 'customer_management'],
)
def get_customers__id_fields__field_id(
    login: str, authtoken: str = ..., id: int = ..., field_id: int = ...
):
    """
    Retrieve a single Customer Additional Field.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/customers/{id}/fields/{field_id}',
    tags=['customer_management', 'custom_field_management'],
)
def put_customers__id_fields__field_id(
    login: str,
    authtoken: str = ...,
    id: int = ...,
    field_id: int = ...,
    body: CustomerAdditionalFieldEdit = ...,
):
    """
    Update a Customer Additional Field.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/fulfillments.json', tags=['fulfillment_management'])
def get_fulfillments_json(
    login: str,
    authtoken: str = ...,
    limit: Optional[conint(le=200)] = 50,
    page: Optional[int] = 1,
):
    """
    Retrieve all Fulfillments.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/fulfillments/count.json', tags=['fulfillment_management'])
def get_fulfillments_count_json(login: str, authtoken: str = ...):
    """
    Count all Fulfillments.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/fulfillments/{id}.json', tags=['fulfillment_management'])
def get_fulfillments__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve a single Fulfillment.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/hooks.json', tags=['hook_management'])
def get_hooks_json(
    login: str,
    authtoken: str = ...,
    limit: Optional[conint(le=200)] = 50,
    page: Optional[int] = 1,
):
    """
    Retrieve all Hooks.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/hooks.json', tags=['hook_management'])
def post_hooks_json(login: str, authtoken: str = ..., body: HookEdit = ...):
    """
    Create a new Hook.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/hooks/{id}.json', tags=['hook_management'])
def delete_hooks__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Delete an existing Hook.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/hooks/{id}.json', tags=['hook_management'])
def get_hooks__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve a single Hook.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/hooks/{id}.json', tags=['hook_management'])
def put_hooks__id_json(
    login: str, authtoken: str = ..., id: int = ..., body: HookEdit = ...
):
    """
    Update a Hook.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/jsapps.json', tags=['jsapp_management', 'store_management'])
def get_jsapps_json(login: str, authtoken: str = ...):
    """
    Retrieve all the Store's JSApps.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/jsapps.json', tags=['jsapp_management', 'store_management'])
def post_jsapps_json(login: str, authtoken: str = ..., body: JSAppEdit = ...):
    """
    Create a Store JSApp.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/jsapps/{code}.json', tags=['jsapp_management'])
def delete_jsapps__code_json(login: str, authtoken: str = ..., code: str = ...):
    """
    Delete an existing JSApp.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/jsapps/{code}.json', tags=['jsapp_management'])
def get_jsapps__code_json(login: str, authtoken: str = ..., code: str = ...):
    """
    Retrieve a JSApp.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/order/{id}/fulfillments.json', tags=['fulfillment_management', 'order_management']
)
def get_order__id_fulfillments_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve the Fulfillments associated with the Order.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orders.json',
    tags=['order_management', 'customer_management', 'fulfillment_management'],
)
def get_orders_json(
    login: str,
    authtoken: str = ...,
    limit: Optional[conint(le=200)] = 50,
    page: Optional[int] = 1,
):
    """
    Retrieve all Orders.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/orders.json',
    description=""" Orders created externally keep the given order product's values (bypassing internal promotion or product amounts). """,
    tags=['order_management'],
)
def post_orders_json(login: str, authtoken: str = ..., body: OrderCreate = ...):
    """
    Create a new Order.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/orders/after/{id}.json',
    description=""" For example the GET /orders/after/5000 will return Order 5001, 5002, 5003, etc. """,
    tags=['order_management'],
)
def get_orders_after__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve orders filtered by Order Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/orders/count.json', tags=['order_management'])
def get_orders_count_json(login: str, authtoken: str = ...):
    """
    Count all Orders.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/orders/status/{status}.json', tags=['order_management'])
def get_orders_status__status_json(
    login: str, authtoken: str = ..., status: Status11 = ...
):
    """
    Retrieve orders filtered by status.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/orders/{id}.json', tags=['order_management', 'fulfillment_management'])
def get_orders__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve a single Order.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/orders/{id}.json',
    description=""" Only `status`, `shipment_status`, `tracking_number`, `tracking_company`, `tracking_url`, `additional_information` and `additional_fields` are available for update. An email is send if `shipment_status` changes. """,
    tags=['order_management'],
)
def put_orders__id_json(
    login: str, authtoken: str = ..., id: int = ..., body: OrderEdit = ...
):
    """
    Modify an existing Order.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/orders/{id}/history.json', tags=['order_management', 'customer_management'])
def get_orders__id_history_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve all Order History.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/orders/{id}/history.json', tags=['order_management', 'customer_management'])
def post_orders__id_history_json(
    login: str, authtoken: str = ..., id: int = ..., body: OrderHistoryEdit = ...
):
    """
    Create a new Order History Entry.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/pages.json', tags=['page_management'])
def get_pages_json(
    login: str,
    authtoken: str = ...,
    limit: Optional[conint(le=200)] = 50,
    page: Optional[int] = 1,
):
    """
    Retrieve all Pages.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/pages.json', tags=['page_management'])
def post_pages_json(login: str, authtoken: str = ..., body: PageModify = ...):
    """
    Create a new Page.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/pages/count.json', tags=['page_management'])
def get_pages_count_json(login: str, authtoken: str = ...):
    """
    Count all Pages.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/pages/{id}.json', tags=['page_management'])
def delete_pages__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Delete an existing Page.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/pages/{id}.json', tags=['page_management'])
def get_pages__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve a single Page by id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/pages/{id}.json', tags=['page_management'])
def put_pages__id_json(
    login: str, authtoken: str = ..., id: int = ..., body: PageModify = ...
):
    """
    Update a Page.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/partners/stores.json', tags=['partner_statistics'])
def get_partners_stores_json(
    partner_code: str,
    auth_token: str = ...,
    page: Optional[int] = 1,
    from_: str = Query(..., alias='from'),
    to: str = ...,
):
    """
    Retrieve statistics.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/payment_methods.json', tags=['payment_method_management'])
def get_payment_methods_json(login: str, authtoken: str = ...):
    """
    Retrieve all Store's Payment Methods.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/payment_methods/{id}.json', tags=['payment_method_management'])
def get_payment_methods__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve a single Payment Method.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/products.json', tags=['product_management'])
def get_products_json(
    login: str,
    authtoken: str = ...,
    limit: Optional[conint(le=200)] = 50,
    page: Optional[int] = 1,
    locale: Optional[str] = None,
):
    """
    Retrieve all Products.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/products.json', tags=['product_management'])
def post_products_json(
    login: str,
    authtoken: str = ...,
    locale: Optional[str] = None,
    body: ProductEdit = ...,
):
    """
    Create a new Product.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/products/after/{id}.json', tags=['product_management'])
def get_products_after__id_json(
    login: str, authtoken: str = ..., id: int = ..., locale: Optional[str] = None
):
    """
    Retrieves Products after the given id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/category/{category_id}.json',
    tags=['category_management', 'product_management'],
)
def get_products_category__category_id_json(
    login: str,
    authtoken: str = ...,
    locale: Optional[str] = None,
    category_id: int = ...,
):
    """
    Retrieve Products filtered by category.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/category/{category_id}/count.json',
    tags=['product_management', 'category_management'],
)
def get_products_category__category_id_count_json(
    login: str,
    authtoken: str = ...,
    locale: Optional[str] = None,
    category_id: int = ...,
):
    """
    Count Products filtered by category.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/products/count.json', tags=['product_management'])
def get_products_count_json(login: str, authtoken: str = ...):
    """
    Count all Products.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/search.json',
    description=""" Endpoint example: 

```text
https://api.jumpseller.com/v1/products/search.json?login=XXXXXX&authtoken=XXXXX&query=test&fields=name,description 
``` """,
    tags=['product_management'],
)
def get_products_search_json(
    login: str,
    authtoken: str = ...,
    locale: Optional[str] = None,
    query: str = ...,
    fields: Optional[Fields] = None,
):
    """
    Retrieve a Product List from a query.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/products/status/{status}.json', tags=['product_management'])
def get_products_status__status_json(
    login: str,
    authtoken: str = ...,
    locale: Optional[str] = None,
    status: Status12 = ...,
):
    """
    Retrieve Products filtered by status.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/products/status/{status}/count.json', tags=['product_management'])
def get_products_status__status_count_json(
    login: str,
    authtoken: str = ...,
    locale: Optional[str] = None,
    status: Status12 = ...,
):
    """
    Count Products filtered by status.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/products/{id}.json', tags=['product_management'])
def delete_products__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Delete an existing Product.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/products/{id}.json', tags=['product_management'])
def get_products__id_json(
    login: str, authtoken: str = ..., locale: Optional[str] = None, id: int = ...
):
    """
    Retrieve a single Product.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/products/{id}.json',
    tags=['product_management', 'product_custom_field_management'],
)
def put_products__id_json(
    login: str,
    authtoken: str = ...,
    id: int = ...,
    locale: Optional[str] = None,
    body: ProductEdit = ...,
):
    """
    Modify an existing Product.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}/attachments.json',
    tags=['product_attachment_management', 'product_management'],
)
def get_products__id_attachments_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve all Product Attachments.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/products/{id}/attachments.json',
    tags=['product_management', 'product_attachment_management'],
)
def post_products__id_attachments_json(
    login: str, authtoken: str = ..., id: int = ..., body: AttachmentEdit = ...
):
    """
    Create a new Product Attachment.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}/attachments/count.json',
    tags=['product_attachment_management', 'product_management'],
)
def get_products__id_attachments_count_json(
    login: str, authtoken: str = ..., id: int = ...
):
    """
    Count all Product Attachments.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/products/{id}/attachments/{attachment_id}.json',
    tags=['product_attachment_management', 'product_management'],
)
def delete_products__id_attachments__attachment_id_json(
    login: str, authtoken: str = ..., id: int = ..., attachment_id: int = ...
):
    """
    Delete a Product Attachment.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}/attachments/{attachment_id}.json',
    tags=['product_attachment_management', 'product_management'],
)
def get_products__id_attachments__attachment_id_json(
    login: str, authtoken: str = ..., id: int = ..., attachment_id: int = ...
):
    """
    Retrieve a single Product Attachment.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}/digital_products.json',
    tags=['product_management', 'product_digital_management'],
)
def get_products__id_digital_products_json(
    login: str, authtoken: str = ..., id: int = ...
):
    """
    Retrieve all Product DigitalProducts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/products/{id}/digital_products.json',
    tags=['product_management', 'product_digital_management'],
)
def post_products__id_digital_products_json(
    login: str, authtoken: str = ..., id: int = ..., body: DigitalProductEdit = ...
):
    """
    Create a new Product DigitalProduct.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}/digital_products/count.json',
    tags=['product_digital_management', 'product_management'],
)
def get_products__id_digital_products_count_json(
    login: str, authtoken: str = ..., id: int = ...
):
    """
    Count all Product DigitalProducts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/products/{id}/digital_products/{digital_product_id}.json',
    tags=['product_management', 'product_digital_management'],
)
def delete_products__id_digital_products__digital_product_id_json(
    login: str, authtoken: str = ..., id: int = ..., digital_product_id: int = ...
):
    """
    Delete a Product DigitalProduct.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}/digital_products/{digital_product_id}.json',
    tags=['product_digital_management', 'product_management'],
)
def get_products__id_digital_products__digital_product_id_json(
    login: str, authtoken: str = ..., id: int = ..., digital_product_id: int = ...
):
    """
    Retrieve a single Product DigitalProduct.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}/fields.json',
    tags=['custom_field_management', 'product_custom_field_management'],
)
def get_products__id_fields_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve all Product Custom Fields
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/products/{id}/fields.json',
    tags=[
        'custom_field_management',
        'product_custom_field_management',
        'product_management',
    ],
)
def post_products__id_fields_json(
    login: str, authtoken: str = ..., id: int = ..., body: AddProductCustomField = ...
):
    """
    Add an existing Custom Field to a Product.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}/fields/count.json',
    tags=['product_custom_field_management', 'custom_field_management'],
)
def get_products__id_fields_count_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Count all Product Custom Fields.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}/images.json',
    tags=['product_image_management', 'product_management'],
)
def get_products__id_images_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve all Product Images.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/products/{id}/images.json',
    tags=['product_image_management', 'product_management'],
)
def post_products__id_images_json(
    login: str, authtoken: str = ..., id: int = ..., body: ImageEdit = ...
):
    """
    Create a new Product Image.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}/images/count.json',
    tags=['product_image_management', 'product_management'],
)
def get_products__id_images_count_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Count all Product Images.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/products/{id}/images/{image_id}.json',
    tags=[
        'product_image_management',
        'product_management',
        'product_attachment_management',
    ],
)
def delete_products__id_images__image_id_json(
    login: str, authtoken: str = ..., id: int = ..., image_id: int = ...
):
    """
    Delete a Product Image.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/products/{id}/images/{image_id}.json', tags=['product_image_management'])
def get_products__id_images__image_id_json(
    login: str, authtoken: str = ..., id: int = ..., image_id: int = ...
):
    """
    Retrieve a single Product Image.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/products/{id}/options.json', tags=['product_option_management'])
def get_products__id_options_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve all Product Options.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/products/{id}/options.json', tags=['product_option_management'])
def post_products__id_options_json(
    login: str, authtoken: str = ..., id: int = ..., body: ProductOptionEdit = ...
):
    """
    Create a new Product Option.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/products/{id}/options/count.json', tags=['product_option_management'])
def get_products__id_options_count_json(
    login: str, authtoken: str = ..., id: int = ...
):
    """
    Count all Product Options.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/products/{id}/options/{option_id}.json', tags=['product_option_management']
)
def delete_products__id_options__option_id_json(
    login: str, authtoken: str = ..., id: int = ..., option_id: int = ...
):
    """
    Delete a Product Option.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}/options/{option_id}.json',
    tags=['product_option_management', 'product_management'],
)
def get_products__id_options__option_id_json(
    login: str, authtoken: str = ..., id: int = ..., option_id: int = ...
):
    """
    Retrieve a single Product Option.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/products/{id}/options/{option_id}.json',
    tags=['product_option_management', 'product_management'],
)
def put_products__id_options__option_id_json(
    login: str,
    authtoken: str = ...,
    id: int = ...,
    option_id: int = ...,
    body: ProductOptionEdit = ...,
):
    """
    Modify an existing Product Option.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}/options/{option_id}/values.json',
    tags=['product_option_value_management', 'product_option_management'],
)
def get_products__id_options__option_id_values_json(
    login: str, authtoken: str = ..., id: int = ..., option_id: int = ...
):
    """
    Retrieve all Product Option Values.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/products/{id}/options/{option_id}/values.json',
    tags=[
        'product_option_value_management',
        'product_option_management',
        'product_management',
    ],
)
def post_products__id_options__option_id_values_json(
    login: str,
    authtoken: str = ...,
    id: int = ...,
    option_id: int = ...,
    body: ProductOptionValueEdit = ...,
):
    """
    Create a new Product Option Value.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}/options/{option_id}/values/count.json',
    tags=['product_option_management', 'product_option_value_management'],
)
def get_products__id_options__option_id_values_count_json(
    login: str, authtoken: str = ..., id: int = ..., option_id: int = ...
):
    """
    Count all Product Option Values.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/products/{id}/options/{option_id}/values/{value_id}.json',
    tags=['product_option_value_management', 'product_option_management'],
)
def delete_products__id_options__option_id_values__value_id_json(
    login: str,
    authtoken: str = ...,
    id: int = ...,
    option_id: int = ...,
    value_id: int = ...,
):
    """
    Delete a Product Option Value.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}/options/{option_id}/values/{value_id}.json',
    tags=['product_option_value_management', 'product_option_management'],
)
def get_products__id_options__option_id_values__value_id_json(
    login: str,
    authtoken: str = ...,
    id: int = ...,
    option_id: int = ...,
    value_id: int = ...,
):
    """
    Retrieve a single Product Option Value.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/products/{id}/options/{option_id}/values/{value_id}.json',
    tags=['product_option_value_management', 'product_option_management'],
)
def put_products__id_options__option_id_values__value_id_json(
    login: str,
    authtoken: str = ...,
    id: int = ...,
    option_id: int = ...,
    value_id: int = ...,
    body: ProductOptionValueEdit = ...,
):
    """
    Modify an existing Product Option Value.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}/variants.json',
    tags=['product_variant_management', 'product_management'],
)
def get_products__id_variants_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve all Product Variants.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/products/{id}/variants.json',
    tags=['product_variant_management', 'product_management'],
)
def post_products__id_variants_json(
    login: str, authtoken: str = ..., id: int = ..., body: VariantEdit = ...
):
    """
    Create a new Product Variant.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}/variants/count.json',
    tags=['product_variant_management', 'product_management'],
)
def get_products__id_variants_count_json(
    login: str, authtoken: str = ..., id: int = ...
):
    """
    Count all Product Variants.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/products/{id}/variants/{variant_id}.json',
    tags=['product_variant_management', 'product_management'],
)
def get_products__id_variants__variant_id_json(
    login: str, authtoken: str = ..., id: int = ..., variant_id: int = ...
):
    """
    Retrieve a single Product Variant.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/products/{id}/variants/{variant_id}.json',
    tags=['product_variant_management', 'product_management'],
)
def put_products__id_variants__variant_id_json(
    login: str,
    authtoken: str = ...,
    id: int = ...,
    variant_id: int = ...,
    body: VariantEdit = ...,
):
    """
    Modify an existing Product Variant.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/products/{product_id}/fields/{field_id}.json',
    tags=[
        'product_custom_field_management',
        'custom_field_management',
        'product_management',
    ],
)
def delete_products__product_id_fields__field_id_json(
    login: str, authtoken: str = ..., product_id: int = ..., field_id: int = ...
):
    """
    Delete value of Product Custom Field
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/products/{product_id}/fields/{field_id}.json',
    tags=[
        'product_custom_field_management',
        'custom_field_management',
        'product_management',
    ],
)
def put_products__product_id_fields__field_id_json(
    login: str, authtoken: str = ..., product_id: int = ..., field_id: int = ...
):
    """
    Update value of Product Custom Field
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/promotions.json', tags=['promotion_management'])
def get_promotions_json(
    login: str,
    authtoken: str = ...,
    limit: Optional[int] = None,
    page: Optional[int] = None,
):
    """
    Retrieve all Promotions.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/promotions.json', tags=['promotion_management'])
def post_promotions_json(login: str, authtoken: str = ..., body: PromotionEdit = ...):
    """
    Create a new Promotion.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/promotions/{id}.json', tags=['promotion_management'])
def delete_promotions__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Delete an existing Promotion.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/promotions/{id}.json', tags=['promotion_management'])
def get_promotions__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve a single Promotion.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/promotions/{id}.json', tags=['promotion_management'])
def put_promotions__id_json(
    login: str, authtoken: str = ..., id: int = ..., body: PromotionEdit = ...
):
    """
    Update a Promotion.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/shipping_methods.json', tags=['shipping_method_management', 'store_management']
)
def get_shipping_methods_json(login: str, authtoken: str = ...):
    """
    Retrieve all Store's Shipping Methods.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/shipping_methods.json', tags=['shipping_method_management'])
def post_shipping_methods_json(
    login: str, authtoken: str = ..., body: ShippingMethodEdit = ...
):
    """
    Creates a Shipping Method.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/shipping_methods/{id}.json', tags=['shipping_method_management'])
def delete_shipping_methods__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Delete an existing Shipping Method.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/shipping_methods/{id}.json', tags=['shipping_method_management'])
def get_shipping_methods__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve a single Shipping Method.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/shipping_methods/{id}.json', tags=['shipping_method_management'])
def put_shipping_methods__id_json(
    login: str, authtoken: str = ..., id: int = ..., body: ShippingMethodEdit = ...
):
    """
    Update a Shipping Method.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/store/check_status.json', tags=['store_management'])
def get_store_check_status_json(
    partner_code: str,
    auth_token: str = ...,
    store_code: str = ...,
    locale: Optional[str] = 'en',
):
    """
    Retrive store creation status.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/store/create.json', tags=['store_management', 'partner_statistics'])
def post_store_create_json(
    partner_code: str, auth_token: str = ..., body: PartnerStoreCreate = ...
):
    """
    Create a Partnered Store
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/store/info.json', tags=['store_management'])
def get_store_info_json(login: str, authtoken: str = ...):
    """
    Retrieve Store Information.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/store/languages.json', tags=['store_management', 'country_management'])
def get_store_languages_json(login: str, authtoken: str = ...):
    """
    Retrieve Store Languages.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/taxes.json', tags=['tax_management'])
def get_taxes_json(login: str, authtoken: str = ...):
    """
    Retrieve all Taxes.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/taxes.json', tags=['tax_management'])
def post_taxes_json(login: str, authtoken: str = ..., body: TaxEdit = ...):
    """
    Create a new Tax.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/taxes/{id}.json', tags=['tax_management'])
def get_taxes__id_json(login: str, authtoken: str = ..., id: int = ...):
    """
    Retrieve a single Tax information.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
